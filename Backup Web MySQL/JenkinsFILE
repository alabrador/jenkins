pipeline {
    agent any

    environment {
        DB_NAME = 'apro_productiondb'
        REMOTE_HOST = '66.94.98.24'
        REMOTE_TMP = '/tmp'
        BACKUP_DIR = "${WORKSPACE}/backups"
        DATE = new Date().format('yyyy-MM-dd_HH-mm-ss')
        FILE_NAME = "${DB_NAME}_${DATE}.sql.gz"
    }

    triggers {
        cron('H 2 * * *') // Diariamente a las 2 AM, hora aleatoria entre 2:00-2:59
    }

    stages {

        stage('Preparar backup local') {
            steps {
                sh '''
                    mkdir -p "${BACKUP_DIR}"
                '''
            }
        }

        stage('Respaldar vía SSH remota') {
            steps {
                sshagent (credentials: ['remote_ssh_apronto']) {
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'mysql_cred_apronto',
                            usernameVariable: 'MYSQL_USER',
                            passwordVariable: 'MYSQL_PASS'
                        )
                    ]) {
                        sh """
                            ssh -p 12028 -o StrictHostKeyChecking=no root@${REMOTE_HOST} \
                            'mysqldump -u"$MYSQL_USER" -p"$MYSQL_PASS" ${DB_NAME} | gzip > ${REMOTE_TMP}/${FILE_NAME}'
                        """
                    }
                }
            }
        }

        stage('Descargar respaldo') {
            steps {
                sshagent (credentials: ['remote_ssh_apronto']) {
                    sh """
                        scp -P 12028 -o StrictHostKeyChecking=no root@${REMOTE_HOST}:${REMOTE_TMP}/${FILE_NAME} "${BACKUP_DIR}/"
                    """
                }
            }
        }

        stage('Limpiar respaldo remoto') {
            steps {
                sshagent (credentials: ['remote_ssh_apronto']) {
                    sh """
                        ssh -p 12028 root@${REMOTE_HOST} "rm -f ${REMOTE_TMP}/${FILE_NAME}"
                    """
                }
            }
        }

        stage('Limpiar respaldos antiguos') {
            steps {
                sh '''
                    find "${BACKUP_DIR}" -type f -name "*.sql.gz" -mtime +7 -exec rm -f {} \;
                '''
            }
        }
    }

    post {
        success {
            echo "✅ Backup exitoso: ${FILE_NAME}"
        }
        failure {
            echo "❌ Falló el respaldo"
        }
    }
}