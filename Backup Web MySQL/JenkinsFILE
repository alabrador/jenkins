pipeline {
    agent any
    environment {
        REMOTE_HOST = credentials('REMOTE_HOST_APRONTO')
        REMOTE_PORT = credentials('REMOTE_PORT_APRONTO')
        DB_NAME = credentials('DB_NAME_SECRET')
        SSH_CREDENTIALS_ID = 'remote_ssh_apronto'
    }
    stages {
        stage('Preparar directorio de backup local') {
            steps {
                sh 'mkdir -p ${WORKSPACE}/backups'
            }
        }
        stage('Realizar backup remoto') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'mysql_cred_apronto', usernameVariable: 'MYSQL_USER', passwordVariable: 'MYSQL_PASS')]) {
                    sshagent(credentials: [SSH_CREDENTIALS_ID]) {
                        script {
                            def backupFile = "${DB_NAME}_\$(date +%F_%H-%M-%S).sql.gz"
                            sh """
                            ssh -p ${REMOTE_PORT} ${REMOTE_HOST} \\
                                "mysqldump -u${MYSQL_USER} -p'${MYSQL_PASS}' ${DB_NAME} | gzip > /tmp/${backupFile}"
                            scp -P ${REMOTE_PORT} ${REMOTE_HOST}:/tmp/${backupFile} ${WORKSPACE}/backups/
                            ssh -p ${REMOTE_PORT} ${REMOTE_HOST} \\
                                'find /tmp -type f -name "${DB_NAME}_*.sql.gz" -mtime +7 -exec rm -f {} \\\\;'
                            """
                        }
                    }
                }
            }
        }
        stage('Limpiar backups locales antiguos') {
            steps {
                sh """
                find ${WORKSPACE}/backups -type f -name "${DB_NAME}_*.sql.gz" -mtime +7 -exec rm -f {} \\\\;
                """
            }
        }
    }
    post {
        success {
            echo "✅ Respaldo completado correctamente."
        }
        failure {
            echo "❌ Falló el respaldo."
        }
    }
}
