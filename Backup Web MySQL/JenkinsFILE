pipeline {
    agent any

    environment {
        REMOTE_TMP = '/tmp'
        BACKUP_DIR = "${env.WORKSPACE}/backups"
    }

    triggers {
        cron('H 2 * * *') // Diariamente alrededor de las 2am
    }

    stages {
        stage('Cargar credenciales y variables') {
            steps {
                withCredentials([
                    string(credentialsId: 'DB_NAME_SECRET', variable: 'DB_NAME_TMP'),
                    string(credentialsId: 'REMOTE_HOST_APRONTO', variable: 'REMOTE_HOST_TMP'),
                    string(credentialsId: 'REMOTE_PORT_APRONTO', variable: 'REMOTE_PORT_TMP')
                ]) {
                    script {
                        env.DB_NAME     = DB_NAME_TMP
                        env.REMOTE_HOST = REMOTE_HOST_TMP
                        env.REMOTE_PORT = REMOTE_PORT_TMP
                        env.DATE        = new Date().format('yyyy-MM-dd_HH-mm-ss')
                        env.FILE_NAME   = "${env.DB_NAME}_${env.DATE}.sql.gz"
                    }
                }
            }
        }

        stage('Preparar backup local') {
            steps {
                sh 'mkdir -p "${BACKUP_DIR}"'
            }
        }

        stage('Respaldar vía SSH remota') {
            steps {
                sshagent (credentials: ['remote_ssh_apronto']) {
                    withCredentials([
                        usernamePassword(credentialsId: 'mysql_cred_apronto', usernameVariable: 'MYSQL_USER', passwordVariable: 'MYSQL_PASS')
                    ]) {
                        sh """
                            ssh -p ${env.REMOTE_PORT} -o StrictHostKeyChecking=no root@${env.REMOTE_HOST} \\
                            'mysqldump -u"${MYSQL_USER}" -p"${MYSQL_PASS}" ${env.DB_NAME} | gzip > ${env.REMOTE_TMP}/${env.FILE_NAME}'
                        """
                    }
                }
            }
        }

        stage('Descargar respaldo') {
            steps {
                sshagent (credentials: ['remote_ssh_apronto']) {
                    sh """
                        scp -P ${env.REMOTE_PORT} -o StrictHostKeyChecking=no root@${env.REMOTE_HOST}:${env.REMOTE_TMP}/${env.FILE_NAME} "${env.BACKUP_DIR}/"
                    """
                }
            }
        }

        stage('Limpiar respaldo remoto') {
            steps {
                sshagent (credentials: ['remote_ssh_apronto']) {
                    sh """
                        ssh -p ${env.REMOTE_PORT} -o StrictHostKeyChecking=no root@${env.REMOTE_HOST} "rm -f ${env.REMOTE_TMP}/${env.FILE_NAME}"
                    """
                }
            }
        }

        stage('Limpiar respaldos antiguos') {
            steps {
                sh '''
                    find "${BACKUP_DIR}" -type f -name "*.sql.gz" -mtime +7 -exec rm -f {} ';'
                '''
            }
        }
    }

    post {
        success {
            echo "✅ Backup exitoso: ${env.FILE_NAME}"
        }
        failure {
            echo "❌ Falló el respaldo"
        }
    }
}