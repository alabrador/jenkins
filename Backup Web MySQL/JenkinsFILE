pipeline {
    agent any

    environment {
        BACKUP_DIR = "${env.WORKSPACE}/backups"
        REMOTE_TMP_DIR = "/tmp"
    }

    stages {
        stage('Preparar directorio local') {
            steps {
                script {
                    sh "mkdir -p ${BACKUP_DIR}"
                    echo "Directorio de backup local preparado: ${BACKUP_DIR}"
                }
            }
        }

        stage('Realizar respaldo remoto') {
            steps {
                sshagent(credentials: ['remote_ssh_apronto']) {
                    withCredentials([
                        string(credentialsId: 'DB_NAME_SECRET', variable: 'DB_NAME'),
                        string(credentialsId: 'REMOTE_HOST_APRONTO', variable: 'REMOTE_HOST'),
                        string(credentialsId: 'REMOTE_PORT_APRONTO', variable: 'REMOTE_PORT'),
                        usernamePassword(credentialsId: 'mysql_cred_apronto', usernameVariable: 'MYSQL_USER', passwordVariable: 'MYSQL_PASS')
                    ]) {
                        script {
                            def timestamp = new Date().format("yyyy-MM-dd_HH-mm-ss")
                            def backupFileName = "${DB_NAME}_${timestamp}.sql.gz"
                            env.BACKUP_FILE_NAME = backupFileName

                            echo "Generando respaldo remoto: ${backupFileName}"

                            sh """
                                ssh -p ${REMOTE_PORT} -o StrictHostKeyChecking=no root@${REMOTE_HOST} \\
                                "mysqldump -u${MYSQL_USER} -p${MYSQL_PASS} ${DB_NAME} | gzip > ${REMOTE_TMP_DIR}/${backupFileName}"
                            """
                        }
                    }
                }
            }
        }

        stage('Descargar respaldo') {
            steps {
                sshagent(credentials: ['remote_ssh_apronto']) {
                    withCredentials([
                        string(credentialsId: 'REMOTE_HOST_APRONTO', variable: 'REMOTE_HOST'),
                        string(credentialsId: 'REMOTE_PORT_APRONTO', variable: 'REMOTE_PORT')
                    ]) {
                        script {
                            echo "Descargando respaldo remoto: ${env.BACKUP_FILE_NAME}"

                            sh """
                                scp -P ${REMOTE_PORT} -o StrictHostKeyChecking=no root@${REMOTE_HOST}:${REMOTE_TMP_DIR}/${env.BACKUP_FILE_NAME} ${BACKUP_DIR}/
                            """
                        }
                    }
                }
            }
        }

        stage('Limpiar respaldo remoto') {
            steps {
                sshagent(credentials: ['remote_ssh_apronto']) {
                    withCredentials([
                        string(credentialsId: 'REMOTE_HOST_APRONTO', variable: 'REMOTE_HOST'),
                        string(credentialsId: 'REMOTE_PORT_APRONTO', variable: 'REMOTE_PORT')
                    ]) {
                        script {
                            echo "Eliminando respaldo remoto: ${env.BACKUP_FILE_NAME}"

                            sh """
                                ssh -p ${REMOTE_PORT} root@${REMOTE_HOST} rm -f ${REMOTE_TMP_DIR}/${env.BACKUP_FILE_NAME}
                            """
                        }
                    }
                }
            }
        }

        stage('Limpiar respaldos locales antiguos') {
            steps {
                script {
                    echo "Eliminando respaldos locales con más de 7 días"

                    sh """
                        find ${BACKUP_DIR} -type f -name '*.sql.gz' -mtime +7 -exec rm -f {} \;
                    """
                }
            }
        }
    }

    post {
        success {
            echo "✅ Respaldo completado exitosamente: ${env.BACKUP_FILE_NAME}"
        }
        failure {
            echo "❌ Falló el proceso de respaldo."
        }
    }
}